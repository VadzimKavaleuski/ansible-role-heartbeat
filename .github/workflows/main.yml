---
name: CI

on: [push]

jobs:
  # yamllint:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: yaml-lint
  #       uses: ibiqlik/action-yamllint@master
  #       with:
  #         file_or_dir: ./
  #         config_file: .yamllint

#  ansible_lint:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2
#      - name: befor lint
#        run: git clone https://github.com/lean-delivery/ansible-lint-rules.git ./ansible-lint-rules
#      - name: Lint Ansible Playbook
#        uses: ansible/ansible-lint-action@master
#        with:
#          targets: "./"
#          args: ". -c .ansible-lint"

#  ansible_lint_docker:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2
#      - uses: actions/checkout@v2
#        with:
#          repository: 'lean-delivery/ansible-lint-rules'
#          path: './ansible-lint-rules'
#      - uses: docker://cytopia/ansible-lint
#        with:
#          args: ". -c .ansible-lint --force-color"
          # entrypoint: "ansible-lint -v -c .ansible-lint ./"

  # ansible_lint_action:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions/checkout@v2
  #       with:
  #         repository: 'lean-delivery/ansible-lint-rules'
  #         path: './ansible-lint-rules'
  #     - uses: VadzimKavaleuski/ansible-lint@v1.04


#  lint_check:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2
#      - name: before_script
#        run: |
#            # sudo apt-get update
#            sudo apt-get install -y ansible-lint libssl-dev libffi-dev yamllint
#            ansible-lint --version
#      - name: yamllint
#        run: yamllint . -c .yamllint
#      - name: befor lint
#        run: git clone https://github.com/lean-delivery/ansible-lint-rules.git ./ansible-lint-rules
#      - name: ansible-lint
#        run: |
#          pwd
#          cat .ansible-lint
#          ls -la
#          ansible-lint . -c .ansible-lint --force-color
#      - name: after lint
#        run: rm -rf ./ansible-lint-rules

  # platform_test:
  #   needs:
  #     - yamllint
  #     - ansible_lint_action
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: pwd
  #       run: |
  #         pwd
  #         ls -la
  #     - uses: actions/checkout@v2
  #     - name: before_script
  #       run: |
  #           # sudo apt-get update
  #           sudo apt-get install -y python-pip libssl-dev libffi-dev
  #           sudo pip install --upgrade --user setuptools
  #     - name: install molecule
  #       run: |
  #           sudo pip install molecule
  #           sudo pip install 'molecule[docker]'
  #     - name: before_script
  #       run: |
  #           rm -rf ./molecule/resources/provisioning
  #           ansible --version
  #           ansible-lint --version
  #           molecule --version
  #     - uses: actions/checkout@v2
  #       with:
  #         repository: 'lean-delivery/ansible-molecule-drivers'
  #         path: './molecule/resources/provisioning'
  #     - name: pwd
  #       run: |
  #         pwd
  #         ls -la
  #     - name: deployment test
  #       run: molecule test -s default

  # platform_test_container:
  #   # needs:
  #   #   - yamllint
  #   #   - ansible_lint_action
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: before_script
  #       run: rm -rf ./molecule/resources/provisioning
  #     - uses: actions/checkout@v2
  #       with:
  #         repository: 'lean-delivery/ansible-molecule-drivers'
  #         path: './molecule/resources/provisioning'
  #     - uses: docker://leandelivery/docker-ansible-ci:ansible-2.8
  #       with:
  #         # path: /home/runner/work
  #         # entrypoint: molecule
  #         # GITHUB_ACTIONS: "false"
  #         # args: --debug test -s default
  #         # working-directory: /home/runner/work
  #         args: |
  #           /bin/sh -c "
  #           mkdir -p /github/${GITHUB_REPOSITORY}&&
  #           cp -R /github/workspace/* /github/${GITHUB_REPOSITORY}&&
  #           cp /github/workspace/.yamllint /github/${GITHUB_REPOSITORY}&&
  #           cp /github/workspace/.ansible-lint /github/${GITHUB_REPOSITORY}&&
  #           cd /github/${GITHUB_REPOSITORY}&&
  #           molecule test -s default"
  #         # args: |
  #         #   /bin/sh -c "
  #         #   mkdir -p /github/${GITHUB_REPOSITORY}&&
  #         #   ln -s /github/workspace/ /github/${GITHUB_REPOSITORY}&&
  #         #   cd /github/${GITHUB_REPOSITORY}/workspace&&
  #         #   pwd&&
  #         #   ls -la&&
  #         #   molecule test -s default"

  # platform_test_container_with_action_1_07:
  #   needs:
  #     - yamllint
  #     - ansible_lint_action
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: before_script
  #       run: |
  #         rm -rf ./molecule/resources/provisioning
  #         # mkdir -p ./${GITHUB_REPOSITORY}
  #     - uses: actions/checkout@v2
  #       # with:
  #       #   path: './${GITHUB_REPOSITORY}/molecule/resources/provisioning'
  #     - name: GITHUB_ACTIONS
  #       run: echo $GITHUB_ACTIONS
  #     - uses: actions/checkout@v2
  #       with:
  #         repository: 'lean-delivery/ansible-molecule-drivers'
  #         path: './molecule/resources/provisioning'
  #         # path: './${GITHUB_REPOSITORY}/molecule/resources/provisioning'
  #     - uses: VadzimKavaleuski/docker-ansible-ci-action@v1.07

  platform_test_container_with_action_1_08:
    # needs:
    #   - yamllint
    #   - ansible_lint_action
    runs-on: ubuntu-latest
    steps:
      - name: before_script 1
        run: mkdir -p ./$GITHUB_REPOSITORY
      - uses: actions/checkout@v2
        with:
          path: ./${{github.repository}}
      - name: before_script 2
        run: rm -rf ./$GITHUB_REPOSITORY/molecule/resources/provisioning
      - uses: actions/checkout@v2
        with:
          repository: 'lean-delivery/ansible-molecule-drivers'
          path: ./${{github.repository}}/molecule/resources/provisioning
      - name: before_script 3
      - name: molecule
        uses: VadzimKavaleuski/docker-ansible-ci-action@v1.08


  # platform_test_aws:
  #   env:
  #     AWS_ACCESS_KEY_ID: ${{secrets.aws_access_key_id}}
  #     AWS_SECRET_ACCESS_KEY: ${{secrets.aws_secret_access_key}}
  #     EC2_REGION: 'us-east-1'
  #     # MOLECULE_DEBUG: true
  #   # needs: lint_check
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v1
  #     - name: before_script
  #       run: |
  #           sudo apt-get update
  #           sudo apt-get install -y python-pip libssl-dev libffi-dev
  #           sudo pip install --upgrade --user setuptools
  #     - name: install molecule
  #       run: sudo pip install molecule boto boto3 botocore
  #     # - name: prepare aws creds
  #     #   run: |
  #     #       mkdir .aws
  #     #       touch .aws/credentials
  #     #       echo "[default]\n" >>.aws/credentials
  #     #       echo aws_access_key_id=$aws_access_key_id\n >>.aws/credentials
  #     #       echo aws_secret_access_key=$aws_secret_access_key\n >>.aws/credentials
  #     #       cat .aws/credentials
  #     - name: before_script
  #       run: |
  #           # rm -rf molecule/resources/provisioning
  #           ip address
  #           ansible --version
  #           ansible-lint --version
  #           molecule --version
  #           pip list boto | grep boto
  #     - name: deployment test
  #       run: molecule test -s cloud-aws-direct
  # platform_test_azure:
  #   env:
  #     AZURE_CLIENT_ID: ${{secrets.AZURE_CLIENT_ID}}
  #     AZURE_SECRET: ${{secrets.AZURE_SECRET}}
  #     AZURE_SUBSCRIPTION_ID: ${{secrets.AZURE_SUBSCRIPTION_ID}}
  #     AZURE_TENANT: ${{secrets.AZURE_TENANT}}
  #     EC2_REGION: 'us-east-1'
  #     MOLECULE_DEBUG: true
  #   # needs: lint_check
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v1
  #     - name: before_script
  #       run: |
  #           sudo apt-get update
  #           sudo apt-get install -y python-pip libssl-dev libffi-dev
  #           sudo pip install --upgrade --user setuptools
  #     - name: install  molecule
  #       run: sudo pip install molecule msrestazure ansible[azure]
  #     - name: before_script
  #       run: |
  #           # rm -rf molecule/resources/provisioning
  #           ansible --version
  #           ansible-lint --version
  #           molecule --version
  #           # git clone https://github.com/lean-delivery/ansible-molecule-drivers.git molecule/resources/provisioning
  #     - name: deployment test
  #       run: molecule test -s cloud-azure-direct
